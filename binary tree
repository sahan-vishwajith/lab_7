#include <iostream>
using namespace std;

struct node {
  int key;
  struct node *left, *right;
  node(){};
};

// Inorder traversal
void traverseInOrder(struct node *root) {
    if(root==NULL){
        return;
    }
    traverseInOrder(root->left);
    cout<<root->key<<" ";
    traverseInOrder(root->right);

}
node* create(int data) {
    node *NODE = new node();
    NODE->key = data;
    NODE->right = NULL;
    NODE->left = NULL;
    return NODE;
}
// Insert a node
struct node *insertNode(struct node *node, int key){
    if (node == NULL) {
        node = create(key);
        return node;
    }
    else{
        if (key<=node->key){
            node->left=insertNode(node->left,key);

        }
        else{
            node->right=insertNode(node->right,key);

        }
        return node;
    }
}
int successor(node *root){
    root=root->right;
    while (root->left!=NULL){
        root=root->left;}
    return root->key;
}
int predecessor(node *root){
    root=root->left;
    while (root->right!=NULL){
        root=root->right;}
    return root->key;
}
node *helpdelete(node *root,int data) {
    if (root == NULL) {
        return root;
    } else if (root->key < data) {
        root->right = helpdelete(root->right, data);
    } else if (root->key > data) {
        root->left = helpdelete(root->left, data);
    } else {
        if (root->left == NULL && root->right == NULL) {
            root = NULL;
        } else if (root->right != NULL) {
            root->key = successor(root);
            root->right = helpdelete(root, root->key);
        } else {
            root->key = predecessor(root);
            root->left = helpdelete(root->left, data);
        }
    }
    return root;
}

// Deleting a node
struct node *deleteNode(struct node *root, int key) {
    helpdelete(root,key);
}

// Driver code
int main() {
  struct node *root = NULL;

  int operation;
  int operand;
  cin >> operation;

  while (operation != -1) {
    switch(operation) {
      case 1: // insert
        cin >> operand;
        root = insertNode(root, operand);
        cin >> operation;
        break;
      case 2: // delete
        cin >> operand;
        root = deleteNode(root, operand);
        cin >> operation;
        break;
      default:
        cout << "Invalid Operator!\n";
        return 0;
    }
  }
  
  traverseInOrder(root);
}
